{"ast":null,"code":"// apiService.js\n\nimport axios from '../api/api';\nconst baseURL = 'http://localhost:8000'; // Replace with your backend URL\n\nconst api = axios.create({\n  baseURL,\n  timeout: 5000 // Optional timeout\n});\nconst signup = async userData => {\n  try {\n    const response = await api.post('/auth/signup', userData);\n    return response.data; // Assuming backend returns data in JSON format\n  } catch (error) {\n    throw new Error(error.response.data.message);\n  }\n};\nconst login = async userData => {\n  try {\n    const response = await api.post('/auth/login', userData);\n    return response.data; // Assuming backend returns data in JSON format\n  } catch (error) {\n    throw new Error(error.response.data.message);\n  }\n};\nconst getAllPatients = async () => {\n  try {\n    const response = await axios.get('/patient/patients');\n    return response.data;\n  } catch (error) {\n    throw new Error(error.response ? error.response.data.error : error.message);\n  }\n};\nconst getAllDoctors = async () => {\n  try {\n    const response = await axios.get('/doctor/doctors');\n    return response.data;\n  } catch (error) {\n    throw new Error(error.response ? error.response.data.error : error.message);\n  }\n};\nexport const createAppointment = async appointmentData => {\n  try {\n    const response = await api.post('/api/appointments', appointmentData);\n    return response.data;\n  } catch (error) {\n    throw error;\n  }\n};\nexport const getAppointmentsByDoctor = async doctorId => {\n  try {\n    const response = await api.get(`/api/appointments/doctor/${doctorId}`);\n    return response.data;\n  } catch (error) {\n    throw error;\n  }\n};\nexport const getAppointmentsByPatient = async patientId => {\n  try {\n    const response = await api.get(`/api/appointments/patient/${patientId}`);\n    return response.data;\n  } catch (error) {\n    throw error;\n  }\n};\nexport const getTemperatureData = async patientId => {\n  try {\n    const response = await api.get(`/api/temperature-data/${patientId}`);\n    return response.data;\n  } catch (error) {\n    console.error('Error fetching temperature data:', error);\n    throw new Error('Failed to fetch temperature data');\n  }\n};\nexport { signup, login, getAllPatients, getAllDoctors };","map":{"version":3,"names":["axios","baseURL","api","create","timeout","signup","userData","response","post","data","error","Error","message","login","getAllPatients","get","getAllDoctors","createAppointment","appointmentData","getAppointmentsByDoctor","doctorId","getAppointmentsByPatient","patientId","getTemperatureData","console"],"sources":["C:/Users/ishika singh/health_monitor/frontend/frontend/src/services/apiService.js"],"sourcesContent":["// apiService.js\r\n\r\nimport axios from '../api/api';\r\n\r\nconst baseURL = 'http://localhost:8000'; // Replace with your backend URL\r\n\r\nconst api = axios.create({\r\n  baseURL,\r\n  timeout: 5000, // Optional timeout\r\n});\r\n\r\nconst signup = async (userData) => {\r\n  try {\r\n    const response = await api.post('/auth/signup', userData);\r\n    return response.data; // Assuming backend returns data in JSON format\r\n  } catch (error) {\r\n    throw new Error(error.response.data.message);\r\n  }\r\n};\r\n\r\nconst login = async (userData) => {\r\n  try {\r\n    const response = await api.post('/auth/login', userData);\r\n    return response.data; // Assuming backend returns data in JSON format\r\n  } catch (error) {\r\n    throw new Error(error.response.data.message);\r\n  }\r\n};\r\nconst getAllPatients = async () => {\r\n  try {\r\n    const response = await axios.get('/patient/patients');\r\n    return response.data;\r\n  } catch (error) {\r\n    throw new Error(error.response ? error.response.data.error : error.message);\r\n  }\r\n};\r\n\r\nconst getAllDoctors = async () => {\r\n  try {\r\n    const response = await axios.get('/doctor/doctors');\r\n    return response.data;\r\n  } catch (error) {\r\n    throw new Error(error.response ? error.response.data.error : error.message);\r\n  }\r\n};\r\n\r\nexport const createAppointment = async (appointmentData) => {\r\n  try {\r\n    const response = await api.post('/api/appointments', appointmentData);\r\n    return response.data;\r\n  } catch (error) {\r\n    throw error;\r\n  }\r\n};\r\n\r\nexport const getAppointmentsByDoctor = async (doctorId) => {\r\n  try {\r\n    const response = await api.get(`/api/appointments/doctor/${doctorId}`);\r\n    return response.data;\r\n  } catch (error) {\r\n    throw error;\r\n  }\r\n};\r\n\r\nexport const getAppointmentsByPatient = async (patientId) => {\r\n  try {\r\n    const response = await api.get(`/api/appointments/patient/${patientId}`);\r\n    return response.data;\r\n  } catch (error) {\r\n    throw error;\r\n  }\r\n};\r\nexport const getTemperatureData = async (patientId) => {\r\n  try {\r\n    const response = await api.get(`/api/temperature-data/${patientId}`);\r\n    return response.data;\r\n  } catch (error) {\r\n    console.error('Error fetching temperature data:', error);\r\n    throw new Error('Failed to fetch temperature data');\r\n  }\r\n};\r\nexport { signup, login,getAllPatients,getAllDoctors };\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}